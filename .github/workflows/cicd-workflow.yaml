name: cicd-demo
on:
  push:
    branches:
      - '*'
jobs:
  build-job:
    name: Build Job
    runs-on: ubuntu-latest
    steps:

      - name: 'Start build job'
        run: |
          echo "Starting the build job."

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Java 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: 'Check Java Version'
        run: |
          java --version

      - name: 'Run Tests'
        run: |
          ./gradlew test

      - name: 'Publish Test Report'
        if: always()
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'test-report'
          path: build/reports/tests/test/*

      - name: 'Assemble JAR'
        run: |
          ./gradlew assemble

      - name: 'Get Version Number'
        run: |
          echo "::set-env name=VERSION::$(./gradlew properties -q | grep "version:" | awk '{print $2}')"

      - name: 'Publish JAR'
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'cicd-demo-${{env.VERSION}}-all.jar'
          path: build/libs/*-all.jar

      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.VM_SSH_KEY}}" >> /home/runner/.oci/id_vm.pub

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults

      - name: 'Fix config file permissions'
        run: |
          /home/runner/bin/oci setup repair-file-permissions --file /home/runner/.oci/config
          /home/runner/bin/oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Check Existing Instance'
        run: |
          echo "::set-env name=EXISTING_VM::$(/home/runner/bin/oci compute instance list --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} --display-name cicd-demo)"

      - name: 'Create Instance'
        if: ${{!env.EXISTING_VM}}
        run: |
          /home/runner/bin/oci compute instance launch \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --assign-public-ip true \
            --display-name cicd-demo \
            --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            --ssh-authorized-keys-file ${{secrets.VM_SSH_KEY}} \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \

      - name: 'Do not create instance'
        if: ${{env.EXISTING_VM}}
        run: |
          echo "don't create it..."